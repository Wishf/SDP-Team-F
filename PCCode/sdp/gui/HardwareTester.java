package sdp.gui;

import sdp.comms.Radio;
import sdp.comms.SingletonRadio;
import sdp.comms.packets.*;
import sdp.util.DriveDirection;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Scanner;

public class HardwareTester extends JDialog {
    private JPanel contentPane;
    private JButton kickButton;
    private JButton catchButton;
    private JButton uncatchButton;
    private JSlider slider1;
    private JButton forwardButton;
    private JButton backwardButton;
    private SingletonRadio radio;

    public HardwareTester() {
        setContentPane(contentPane);
        setModal(true);

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        String[] serialPorts = Radio.getPortNames();

        System.out.println("Please select radio port: ");
        Scanner userChoiceInput = new Scanner(System.in);
        int portNum = userChoiceInput.nextInt();
        while (!(portNum >= 0 && portNum < serialPorts.length)) {
            System.out.println("ERROR: You need to pick a number between 0 and " + serialPorts.length);
            System.out.println("Enter the number for the port you want to use: ");
            portNum = userChoiceInput.nextInt();
        }
        radio = new SingletonRadio(serialPorts[portNum]);

        radio.sendPacket(new ActivatePacket());

        kickButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                radio.sendPacket(new KickPacket());
            }
        });
        catchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                radio.sendPacket(new EngageCatcherPacket());
            }
        });
        uncatchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                radio.sendPacket(new DisengageCatcherPacket());
            }
        });
        forwardButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                byte power = (byte) slider1.getValue();
                radio.sendPacket(new DrivePacket(power, DriveDirection.FORWARD,
                        power, DriveDirection.FORWARD, (byte)0, DriveDirection.FORWARD, 1000));
            }
        });
        backwardButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                byte power = (byte) slider1.getValue();
                System.out.println(power);
                radio.sendPacket(new DrivePacket(power, DriveDirection.BACKWARD,
                        power, DriveDirection.BACKWARD, (byte)0, DriveDirection.BACKWARD, 1000));
            }
        });
    }

    private void onOK() {
// add your code here
        dispose();
    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        HardwareTester dialog = new HardwareTester();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        kickButton = new JButton();
        kickButton.setText("Kick");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(kickButton, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel1, gbc);
        slider1 = new JSlider();
        slider1.setMaximum(255);
        slider1.setValue(100);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(slider1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        forwardButton = new JButton();
        forwardButton.setText("Forward");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(forwardButton, gbc);
        backwardButton = new JButton();
        backwardButton.setText("Backward");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(backwardButton, gbc);
        catchButton = new JButton();
        catchButton.setText("Catch");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(catchButton, gbc);
        uncatchButton = new JButton();
        uncatchButton.setText("Uncatch");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(uncatchButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
